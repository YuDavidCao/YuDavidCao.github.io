{
  "blogs": [
    {
      "route": "how-to-learn-programming-in-2024",
      "title": "How to learn programming in 2024",
      "content": "It has never been easier to learn programming than it is in 2024. However, it's also never been harder. With AI and technology in general continuing to improve, programming tutorials and courses have flooded the internet, making accessing this information easier than ever. At the same time, however, it's easy to get overwhelmed with the massive amount of information and to have no idea where to start. In this article, I will share my advice based on my personal experience on how to learn programming in 2024. No matter what you are trying to do, the first step is always the hardest; this applies to programming as well. First of all, finding a programming language to learn is already a difficult choice as there are countless languages with uses. Some of the more beginner-friendly languages are Python or Javascript, but the initial language choice doesn't matter much because all of the popular languages share the same concepts like variables, loops, and functions. The important thing is to fully understand the concepts and be able to utilize them in problem-solving. If you have a teacher, tutor, or mentor, that is perfect as they can help you understand the concepts and give you advice for learning. However, it is also totally fine to use the internet, which has countless courses, videos, and websites available. But, take it from me: No matter which course you end up choosing, stick to the end so that you don't miss anything because a solid foundation is integral. Meanwhile, don't hesitate to ask for help on places like Stack Overflow or other programming communities as they can provide valuable insights on your programming journey. The initial process of learning can be boring or confusing, and that is where a peer can become invaluable. Having someone at a similar skill level to bounce ideas off, share resources with, and work through challenges with can make the learning journey much smoother and more enjoyable. The best way to learn programming is through projects. With the basic programming concepts under your belt, diving into projects can significantly increase your problem-solving skills and satisfaction. Rather than simply memorizing syntax and algorithms, programming projects provide hands-on experience for applying the knowledge. After learning the basics, it's always a good idea to start with simple projects like a mini-game, a simple website, or any program that interests you. Personally, I find solving math problems with programming to be fascinating as sometimes Olympiad math problems can be trivial with the power of computers. It is very convenient to watch tutorials on YouTube or other places to guide us through a project as they can help us learn and understand new concepts. However, they are useless if you don't implement them yourself. \"Tutorial Hell\" refers to a state where one keeps consuming tutorials without putting the acquired knowledge into practice. True learning happens when you apply all the knowledge you learned from the tutorial and make a similar, but not the same project. Usually, after one or two large projects with the help of tutorials, Google, Stack Overflow, and also generative AI, I begin to fully understand the languages, frameworks, and concepts. Interest is the biggest driving force in learning. In programming, finding an area that interests you is essential. In the programming field, there are countless related fields like web, backend, mobile, AI, etc. Maybe you find the web to be confusing but resonate strongly with AI, maybe you find mobile app development to be tedious but are fascinated by backend systems. Whatever it may be, finding your niche within the vast programming landscape can make the learning process more enjoyable and sustainable. Once you find your passion, follow a developer roadmap or simply pick a passion project and keep putting work into it. Moreover, recording your work can be a massive motivating factor. Post your progress online or put it into your diary or planner can help you track your growth and accomplishments over time. Day by day you will begin to realize your accomplishments and growth. Additionally, sharing your work with others, whether through programming communities, open-source contributions, or collaboration on projects, can yield valuable feedback. In a rapidly evolving industry like programming, learning is not just beneficial — it's essential. Languages, frameworks, and tools will always become obsolete one day, but the concepts, experiences, friends, and ways to learn will preserve and help you forever in your life, so start early, and learn continuously!",
      "summary": "Learning programming in 2024 is easier than ever thanks to abundant resources, but it's also easy to get overwhelmed. Focus on mastering core concepts, building real projects, and following your interests to stay motivated. Avoid \"tutorial hell\" by applying what you learn and tracking your progress.",
      "readMoreUrl": "https://medium.com/@yu.cao20041208/how-to-learn-programming-in-2024-a5b5d5d3edab",
      "tags": [
        "Non-technical",
        "Learning-to-program"
      ],
      "date": "2024-05-25T00:00:00-05:00",
      "image": "/how-to-learn-programming-in-2024/hero.png"
    },
    {
      "route": "write-clean-flutter-code-with-extension-methods",
      "title": "Write clean Flutter code with extension methods",
      "content": "Have you ever encountered a situation where the Flutter implementation of a class just lacks some stuff? For instance, imagine you only want the year, month, and day information from a DateTime object. Your first instinct might be to check for an existing function on the DateTime class, but sadly, it doesn't exist. Here's what you would typically have to do: void main() { DateTime now = DateTime.now(); print(DateTime(now.year, now.month, now.day)); } Pretty tedious and ugly right? Don't worry, extension got you covered: void main() { DateTime now = DateTime.now(); print(now.getDateOnly()); } extension DateOnly on DateTime { DateTime getDateOnly() { return DateTime(this.year, this.month, this.day); } } With the DateOnly extension, if you have a DateTime object and you only want the date information, just call the .getDateOnly() method. Extension allows us to add on additional method to an existing class without modifying the original source code file. Extensions can define not just methods, but also other members such as getter, setters, and operators. Note: adding new non-static class variables are forbidden. Here's the syntax: extension SomeExtension on TargetedClass { ReturnType someMethod(){ doSomething } } More Useful Examples on Extension: Capitalize the first letter of a string: extension Capitalize on String { String capitalize() { return \"${this[0].toUpperCase()}${this.substring(1).toLowerCase()}\"; } } Make an existing color lighter: extension Lighten on Color { Color lighten([double amount = .1]) { assert(amount >= 0 && amount <= 1); final hsl = HSLColor.fromColor(this); final hslLight = hsl.withLightness((hsl.lightness + amount).clamp(0.0, 1.0)); return hslLight.toColor(); } } These are just a few examples. There are multiple extension packages available online for common use cases like isEmail, isToday, isSameWeek, and more. Remember, you can always create your own extension methods based on your needs. The official documentation on extension methods can be found here. Hopefully, you learned something new! Happy coding! Source: https://medium.com/p/cd1cc9e52a8a.",
      "summary": "Learn how to write clean Flutter code using Dart extension methods. This article explains how to add new methods to existing classes, provides practical examples like date-only extraction and string capitalization, and encourages creating your own extensions for cleaner, more maintainable code.",
      "readMoreUrl": "https://medium.com/p/cd1cc9e52a8a",
      "tags": [
        "Flutter",
        "Dart",
        "Technical"
      ],
      "date": "2024-06-12T00:00:00-05:00",
      "image": "/write-clean-flutter-code-with-extension-methods/hero.png"
    },
    {
      "route": "canonical-url-sharing-on-mobile-browsers-and-a-workaround-for-static-sites",
      "title": "Canonical URL sharing on mobile browsers and a workaround for static sites",
      "content": "On mobile browsers like Safari and Chrome, sharing or bookmarking a page often uses the canonical URL instead of the current URL, which can strip query parameters and fragments that are important for users. This behavior, originally intended to help search engines, can cause confusion and loss of context for users sharing filtered or specific views of a page. The article explores why browsers do this, the pros and cons, and offers a workaround for static sites: dynamically updating the canonical link with JavaScript to reflect the current URL, ensuring shared links preserve user context. The post also summarizes browser behaviors and suggests that browsers could offer user-facing options for sharing canonical vs. current URLs.",
      "summary": "Mobile browsers often share canonical URLs, which can strip important context from links. This article explains why, the impact on users, and a workaround for static sites to preserve full URLs when sharing.",
      "readMoreUrl": "https://medium.com/@yu.cao20041208/canonical-url-sharing-on-mobile-browsers-and-a-workaround-for-static-sites-bab360d29835",
      "tags": [
        "Web",
        "Javascript",
        "Frontend",
        "Technical"
      ],
      "date": "2025-06-06T00:00:00-05:00",
      "image": "/canonical-url-sharing-on-mobile-browsers-and-a-workaround-for-static-sites/hero.png"
    },
    {
      "route": "how-i-learned-git-rebasing-a-real-life-work-scenario",
      "title": "How I learned git rebasing — a real life work scenario",
      "content": "Although I had more or less scanned through some git tutorial and searched a few times about rebasing, I often find it difficult to fully comprehend the logic and the reason why people actually use it, until once during work in a scenario where a rebase saved me from the trouble. I had a feature branch A that branched off from main with 3 commits, I believe the three commits to be good to merge so I opened a PR and asked for review. I've talked with my manager a couple times so I thought that PR should be merged without many issues. As a result, I began working on another feature that also happens to be kind of urgent, which I decided to branch off from A and let's just call it B. After another 3 commits or so completing feature B, it turned out that the original 3 commits on feature A needs to change in a pretty big way, yet feature B need to be merged asap. The problem is that if branch B got merged in, the 3 commits on top of A will also be merged in which is not ideal. Therefore, I need a way to extract B1, B2, B3 and put them on top of main instead of on top of A. There's actually two ways to do this, git cherry-pick and git rebase. My intuition told me that this could be a good scenario to practice rebase, so after a quick ChatGPT: git rebase --onto main A did the job perfectly. Technologies are learned through real-life scenario; tutorials are cool and all but without the real life practice those knowledge are hard to grasp.",
      "summary": "A real-life scenario demonstrates how git rebase can help separate feature work from dependent changes. The article explains a branching situation, the problem with merging, and how 'git rebase --onto main A' solves it, highlighting the value of practical experience.",
      "readMoreUrl": "https://medium.com/p/b87487889712",
      "tags": ["Git", "Technical"],
      "date": "2025-06-22T00:00:00-05:00",
      "image": "/how-i-learned-git-rebasing-a-real-life-work-scenario/hero.png"
    },
    {
      "route": "xcode-might-be-eating-up-your-hard-drive-space",
      "title": "Xcode might be eating up your hard drive space!",
      "content": "As a mobile developer, I primarily work with Flutter and most of my apps are IOS-focused. It's been about 8 months since I got my MacBook, and recently I noticed something strange: my 1TB hard drive only had around 80 GB of free space left.\n\nI don't have any games installed, and my source code files shouldn't be taking up that much room. So what was hogging all my storage?\n\nAttempting to figure out what's been eating up my laptop storage, I tried to let the default setting app to give me a quick rundown, but not surpisingly it is still evalutating the storage cost of different types of file (developer, system, document, etc)\n\nAfter installing a disk explorer (not sponsored but this is a good tool ong), and ran a scan, the result is shocking:\n\nApparently, inside ~/Library/Developer/Xcode/DerivedData, there's a folder called \"DerivedData\" which contains build caches and temp files that took up 276 GB of my hard drive.\n\nI deleted the DerivedData folder, and just like that, I reclaimed 276 GB of space. No system issues, no errors in my projects—just a huge weight lifted off my SSD.\n\nMobile developers, watch out for Xcode! Don't let it quietly eat up all your storage. Check your DerivedData folder from time to time — you might be surprised by how much space it's using.",
      "summary": "Xcode's DerivedData folder can consume massive disk space on Mac. This article explains how to find and safely delete it to reclaim storage, with a real-life example of freeing up 276 GB.",
      "readMoreUrl": "https://medium.com/p/b7437cc880a5",
      "tags": ["Xcode", "Mobile", "Technical"],
      "date": "2025-07-01T00:00:00-05:00",
      "image": "/xcode-might-be-eating-up-your-hard-drive-space/hero.png"
    },
    {
      "route": "things-that-literally-doubled-my-productivity-as-a-programmer",
      "title": "Things that literally doubled my productivity as a programmer",
      "content": "As a programmer, I'm always looking for ways to work more efficiently. Over the past few years, I've discovered several tools and techniques that have literally doubled my productivity. These aren't just minor improvements—they're game-changers that have fundamentally changed how I approach coding. In this article, I'll share the specific tools, shortcuts, and practices that have had the biggest impact on my workflow. From keyboard shortcuts to automation tools, these productivity boosters can help any programmer work faster and more effectively. The single biggest productivity boost came from learning and consistently using keyboard shortcuts. Instead of reaching for the mouse, I can now navigate, refactor, and debug entirely with the keyboard. This might seem small, but the cumulative time savings are enormous. AI coding assistants like GitHub Copilot and Cursor have revolutionized how I write code. Instead of writing boilerplate from scratch, I can focus on the logic and architecture. The key is learning to write good prompts and knowing when to accept, modify, or reject AI suggestions. I've automated countless repetitive tasks using scripts, aliases, and tools like AutoHotkey (Windows) or Automator (Mac). From setting up new projects to deploying code, automation saves hours every week. Having a consistent development workflow eliminates decision fatigue and reduces errors. My workflow includes feature branch workflow with clear naming conventions, automated testing and linting on every commit, code review process for all changes, and regular backups and version control. A proper multi-monitor setup with good window management tools has dramatically improved my workflow. I can have documentation, code, and terminal all visible simultaneously without constant switching. This might seem obvious, but learning to touch type properly was a game-changer. I went from 40 WPM to 80+ WPM, which translates to significant time savings when writing code, documentation, and emails. Git mastery has saved me countless hours. Understanding branching, merging, and advanced features like rebasing and cherry-picking has made collaboration much smoother and debugging easier. Quality tools are worth the investment. A good mechanical keyboard, comfortable mouse, and fast SSD can make a noticeable difference in daily productivity. Don't underestimate the impact of ergonomics. These productivity improvements didn't happen overnight. I implemented them gradually, focusing on one area at a time. The key is consistency and finding what works for your specific workflow and preferences. Start with keyboard shortcuts and gradually add other improvements. Track your progress and celebrate the small wins. Remember, productivity is personal—what works for me might not work for you, so experiment and find your own optimal setup.",
      "summary": "Discover practical productivity tips and tools that can significantly boost your programming efficiency, from keyboard shortcuts to automation techniques.",
      "readMoreUrl": "https://medium.com/@yu.cao20041208/things-that-literally-doubled-my-productivity-as-a-programmer-a2806408f46a",
      "tags": [
        "Must-Read",
        "Productivity",
        "Non-technical"
      ],
      "date": "2025-07-26T00:00:00-05:00",
      "image": "/things-that-literally-doubled-my-productivity-as-a-programmer/hero.png"
    }
  ]
}