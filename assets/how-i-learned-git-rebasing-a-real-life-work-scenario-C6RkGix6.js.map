{"version":3,"file":"how-i-learned-git-rebasing-a-real-life-work-scenario-C6RkGix6.js","sources":["../../src/pages/blogs/Blog/how-i-learned-git-rebasing-a-real-life-work-scenario.tsx"],"sourcesContent":["import { CodeBlock } from \"../../../../components/blog-content/code-block\";\nimport { InlineCode } from \"../../../../components/blog-content/inline-code\";\nimport { BlogFooter } from \"../../../../components/blog-content/blog-footer\";\nimport { BlogHeader } from \"../../../../components/blog-content.tsx\";\nimport heroImg from \"../../../../assets/blogs/how-i-learned-git-rebasing-a-real-life-work-scenario/hero.png\";\n\nexport function HowILearnedGitRebasingARealLifeWorkScenario() {\n  return (\n    <>\n      <title>How I learned git rebasing — a real life work scenario</title>\n      <meta\n        name=\"description\"\n        content=\"A real-life scenario that demonstrates the value of git rebasing, with practical tips and takeaways for developers.\"\n      />\n      <meta\n        property=\"og:title\"\n        content=\"How I learned git rebasing — a real life work scenario\"\n      />\n      <meta\n        property=\"og:description\"\n        content=\"A real-life scenario that demonstrates the value of git rebasing, with practical tips and takeaways for developers.\"\n      />\n      <link\n        rel=\"canonical\"\n        href=\"https://yudavidcao.github.io/blog/how-i-learned-git-rebasing-a-real-life-work-scenario\"\n      />\n      <div className=\"w-3/5 flex gap-4 text-xl rounded-lg py-4 flex-col font-sans dark:bg-dark-primary dark:text-dark-tx-primary\">\n        <BlogHeader\n          title=\"How I learned git rebasing — a real life work scenario\"\n          date=\"Jun 22, 2025\"\n          heroImgSrc={heroImg}\n          heroImgAlt=\"How I learned git rebasing — a real life work scenario Hero\"\n        />\n        <article className=\"prose prose-lg max-w-none font-sans dark:prose-invert\">\n          <p className=\"mb-4\">\n            Although I had more or less scanned through some git tutorial and\n            searched a few times about rebasing, I often find it difficult to\n            fully comprehend the logic and the reason why people actually use\n            it, until once during work in a scenario where a rebase saved me\n            from the trouble.\n          </p>\n          <h2 className=\"font-serif text-3xl font-bold mt-10 mb-4 tracking-tight\">\n            Scenario\n          </h2>\n          <p className=\"mb-4\">\n            I had a feature branch <InlineCode>A</InlineCode> that branched off\n            from <InlineCode>main</InlineCode> with 3 commits, I believe the\n            three commits to be good to merge so I opened a PR and asked for\n            review.\n          </p>\n          <p className=\"mb-4\">\n            I've talked with my manager a couple times so I thought that PR\n            should be merged without many issues. As a result, I began working\n            on another feature that also happens to be kind of urgent, which I\n            decided to branch off from <InlineCode>A</InlineCode> and let's just\n            call it <InlineCode>B</InlineCode>.\n          </p>\n          <p className=\"mb-4\">\n            After another 3 commits or so completing feature{\" \"}\n            <InlineCode>B</InlineCode>, it turned out that the original 3\n            commits on feature <InlineCode>A</InlineCode> needs to change in a\n            pretty big way, yet feature <InlineCode>B</InlineCode> need to be\n            merged asap.\n          </p>\n          <CodeBlock\n            language=\"text\"\n            code={`main  \n └─┬─ A (feature A, needs changes)  \n   │   ├─ Commit A1 (needs to change)  \n   │   ├─ Commit A2 (needs to change)  \n   │   ├─ Commit A3 (needs to change)  \n   │   └─┬─ B (feature B, ready to merge)  \n       │   ├─ Commit B1  \n       │   ├─ Commit B2  \n       │   └─ Commit B3`}\n          />\n          <h2 className=\"font-serif text-3xl font-bold mt-10 mb-4 tracking-tight\">\n            The Problem\n          </h2>\n          <p className=\"mb-4\">\n            The problem is that if branch <InlineCode>B</InlineCode> got merged\n            in, the 3 commits on top of <InlineCode>A</InlineCode> will also be\n            merged in which is not ideal. Therefore, I need a way to extract{\" \"}\n            <InlineCode>B1</InlineCode>, <InlineCode>B2</InlineCode>,{\" \"}\n            <InlineCode>B3</InlineCode> and put them on top of{\" \"}\n            <InlineCode>main</InlineCode> instead of on top of{\" \"}\n            <InlineCode>A</InlineCode>.\n          </p>\n          <h2 className=\"font-serif text-3xl font-bold mt-10 mb-4 tracking-tight\">\n            The Solution\n          </h2>\n          <p className=\"mb-4\">\n            There's actually two ways to do this,{\" \"}\n            <InlineCode>git cherry-pick</InlineCode> and{\" \"}\n            <InlineCode>git rebase</InlineCode>.\n          </p>\n          <p className=\"mb-4\">\n            My intuition told me that this could be a good scenario to practice\n            rebase, so after a quick ChatGPT:\n          </p>\n          <CodeBlock language=\"bash\" code={`git rebase --onto main A`} />\n          <p className=\"mb-4\">did the job perfectly.</p>\n          <h2 className=\"font-serif text-3xl font-bold mt-10 mb-4 tracking-tight\">\n            The Takeaway\n          </h2>\n          <p className=\"mb-4\">\n            Technologies are learned through real-life scenario; tutorials are\n            cool and all but without the real life practice those knowledge are\n            hard to grasp.\n          </p>\n          <BlogFooter url=\"https://medium.com/p/b87487889712\" />\n        </article>\n      </div>\n    </>\n  );\n}\n"],"names":["HowILearnedGitRebasingARealLifeWorkScenario","jsxs","Fragment","jsx","BlogHeader","heroImg","InlineCode","CodeBlock","BlogFooter"],"mappings":"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"}